{"version":3,"sources":["functions.ts"],"names":["APPLE_PAY_NOT_SUPPORTED_MESSAGE","setSessionId","sessionId","NativeStripeSdk","initCustomerContext","showPaymentOptionsModal","cartTotal","isiOS","getPaymentMethodId","items","paymentRequestWithApplePay","options","createPaymentMethod","data","paymentMethod","error","retrievePaymentIntent","clientSecret","paymentIntent","confirmPaymentMethod","paymentIntentClientSecret","isApplePaySupported","presentApplePay","params","code","ApplePayError","Canceled","message","updateApplePaySummaryItems","summaryItems","confirmApplePayPayment","handleCardAction","confirmSetupIntent","setupIntent","createTokenForCVCUpdate","cvc","tokenId","handleURLCallback","url","stripeHandled","initPaymentSheet","paymentOption","presentPaymentSheet","response","confirmPaymentSheetPayment"],"mappings":"owBAAA,kCACA,0EACA,8BAkBA,GAAMA,CAAAA,+BAA+B,CACnC,2CADF,CAGO,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAuB,CACjDC,yBAAgBF,YAAhB,CAA6BC,SAA7B,EACD,CAFM,C,kCAIA,GAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,iKAC1BD,yBAAgBC,mBAAhB,EAD0B,uEAA5B,C,gDAIA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,SAAD,CAAuB,CAC5D,GAAIC,cAAJ,CAAW,CACTJ,yBAAgBE,uBAAhB,GACD,CAFD,IAEO,CACLF,yBAAgBE,uBAAhB,CAAwCC,SAAxC,EACD,CACF,CANM,C,wDAQA,GAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAuC,CACvE,GAAIF,cAAJ,CAAW,CACT,MAAOJ,0BAAgBK,kBAAhB,CAAmCC,KAAnC,CAAP,CACD,CACD,MAAON,0BAAgBK,kBAAhB,EAAP,CACD,CALM,C,8CAOA,GAAME,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CACxCD,KADwC,CAExCE,OAFwC,2KAIjCR,yBAAgBO,0BAAhB,CAA2CD,KAA3C,CAAkDE,OAAlD,CAJiC,wEAAnC,C,8DAOA,GAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CACjCC,IADiC,8KAEjCF,OAFiC,kDAEY,EAFZ,qEAKHR,yBAAgBS,mBAAhB,CAC1BC,IAD0B,CAE1BF,OAF0B,CALG,SAKzBG,aALyB,iDASxB,CACLA,aAAa,CAAbA,aADK,CATwB,8FAaxB,CACLC,KAAK,CAAE,sCADF,CAbwB,4EAA5B,C,gDAmBA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CACnCC,YADmC,2NAILd,yBAAgBa,qBAAhB,CAC1BC,YAD0B,CAJK,SAI3BC,aAJ2B,iDAO1B,CACLA,aAAa,CAAbA,aADK,CAP0B,8FAW1B,CACLH,KAAK,CAAE,sCADF,CAX0B,4EAA9B,C,oDAiBA,GAAMI,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAClCC,yBADkC,CAElCP,IAFkC,+KAGlCF,OAHkC,kDAGW,EAHX,qEAMJR,yBAAgBgB,oBAAhB,CAC1BC,yBAD0B,CAE1BP,IAF0B,CAG1BF,OAH0B,CANI,SAM1BO,aAN0B,iDAWzB,CACLA,aAAa,CAAbA,aADK,CAXyB,8FAezB,CACLH,KAAK,CAAE,sCADF,CAfyB,4EAA7B,C,kDAqBA,GAAMM,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,iJAC1Bd,cAD0B,8FACVJ,yBAAgBkB,mBAAhB,EADU,iKAA5B,C,gDAIA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAC7BC,MAD6B,kLAGjBpB,yBAAgBkB,mBAAhB,EAHiB,qFAIpB,CACLN,KAAK,CAAE,CACLS,IAAI,CAAEC,qBAAcC,QADf,CAELC,OAAO,CAAE3B,+BAFJ,CADF,CAJoB,6EAarBG,yBAAgBmB,eAAhB,CAAgCC,MAAhC,CAbqB,0CAepB,EAfoB,gGAiBpB,CACLR,KAAK,CAAE,sCADF,CAjBoB,6EAAxB,C,wCAuBA,GAAMa,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CACxCC,YADwC,6LAG5B1B,yBAAgBkB,mBAAhB,EAH4B,qFAI/B,CACLN,KAAK,CAAE,CACLS,IAAI,CAAEC,qBAAcC,QADf,CAELC,OAAO,CAAE3B,+BAFJ,CADF,CAJ+B,6EAahCG,yBAAgByB,0BAAhB,CAA2CC,YAA3C,CAbgC,0CAe/B,EAf+B,gGAiB/B,CACLd,KAAK,CAAE,sCADF,CAjB+B,6EAAnC,C,8DAuBA,GAAMe,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CACpCb,YADoC,yLAGxBd,yBAAgBkB,mBAAhB,EAHwB,qFAI3B,CACLN,KAAK,CAAE,CACLS,IAAI,CAAEC,qBAAcC,QADf,CAELC,OAAO,CAAE3B,+BAFJ,CADF,CAJ2B,6EAY5BG,yBAAgB2B,sBAAhB,CAAuCb,YAAvC,CAZ4B,0CAa3B,EAb2B,gGAe3B,CACLF,KAAK,CAAE,sCADF,CAf2B,6EAA/B,C,sDAqBA,GAAMgB,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAC9BX,yBAD8B,2NAIAjB,yBAAgB4B,gBAAhB,CAC1BX,yBAD0B,CAJA,SAItBF,aAJsB,mDAOrB,CACLA,aAAa,CAAbA,aADK,CAPqB,kGAWrB,CACLH,KAAK,CAAE,uCADF,CAXqB,6EAAzB,C,0CAiBA,GAAMiB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAChCZ,yBADgC,CAEhCP,IAFgC,+KAGhCF,OAHgC,qDAGM,EAHN,uEAMJR,yBAAgB6B,kBAAhB,CACxBZ,yBADwB,CAExBP,IAFwB,CAGxBF,OAHwB,CANI,SAMxBsB,WANwB,mDAYvB,CACLA,WAAW,CAAXA,WADK,CAZuB,kGAgBvB,CACLlB,KAAK,CAAE,uCADF,CAhBuB,6EAA3B,C,8CAsBA,GAAMmB,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CACrCC,GADqC,4NAIbhC,yBAAgB+B,uBAAhB,CAAwCC,GAAxC,CAJa,SAI7BC,OAJ6B,mDAM5B,CACLA,OAAO,CAAPA,OADK,CAN4B,kGAU5B,CACLrB,KAAK,CAAE,uCADF,CAV4B,6EAAhC,C,wDAgBA,GAAMsB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAOC,GAAP,0MACHnC,yBAAgBkC,iBAAhB,CAAkCC,GAAlC,CADG,SACzBC,aADyB,mDAExBA,aAFwB,yEAA1B,C,4CAKA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAC9BjB,MAD8B,2NAIApB,yBAAgBqC,gBAAhB,CAAiCjB,MAAjC,CAJA,SAItBkB,aAJsB,mDAMrB,CACLA,aAAa,CAAbA,aADK,CANqB,kGAUrB,CACL1B,KAAK,CAAE,uCADF,CAVqB,6EAAzB,C,0CAgBA,GAAM2B,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CACjCnB,MADiC,yNAIRpB,yBAAgBuC,mBAAhB,CAAoCnB,MAApC,CAJQ,SAIzBoB,QAJyB,mDAMxB,CACLF,aAAa,CAAEE,QAAQ,CAACF,aADnB,CANwB,kGAUxB,CACL1B,KAAK,CAAE,uCADF,CAVwB,6EAA5B,C,gDAgBA,GAAM6B,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,oNAEhCzC,yBAAgByC,0BAAhB,EAFgC,2CAI/B,EAJ+B,kGAM/B,CACL7B,KAAK,CAAE,uCADF,CAN+B,4EAAnC,C","sourcesContent":["import { createError, isiOS } from './helpers';\nimport NativeStripeSdk from './NativeStripeSdk';\nimport {\n  ApplePay,\n  ApplePayError,\n  ApplePayResult,\n  ConfirmPaymentMethodResult,\n  ConfirmPaymentSheetPaymentResult,\n  ConfirmSetupIntent,\n  ConfirmSetupIntentResult,\n  CreatePaymentMethodResult,\n  CreateTokenForCVCUpdateResult,\n  HandleCardActionResult,\n  InitPaymentSheetResult,\n  PaymentMethodCreateParams,\n  PaymentSheet,\n  PresentPaymentSheetResult,\n  RetrievePaymentIntentResult,\n} from './types';\n\nconst APPLE_PAY_NOT_SUPPORTED_MESSAGE =\n  'Apple pay is not supported on this device';\n\nexport const setSessionId = (sessionId: string) => {\n  NativeStripeSdk.setSessionId(sessionId);\n};\n\nexport const initCustomerContext = async () => {\n  return NativeStripeSdk.initCustomerContext();\n};\n\nexport const showPaymentOptionsModal = (cartTotal: number) => {\n  if (isiOS) {\n    NativeStripeSdk.showPaymentOptionsModal();\n  } else {\n    NativeStripeSdk.showPaymentOptionsModal(cartTotal);\n  }\n};\n\nexport const getPaymentMethodId = (items: ApplePay.CartSummaryItem[]) => {\n  if (isiOS) {\n    return NativeStripeSdk.getPaymentMethodId(items);\n  }\n  return NativeStripeSdk.getPaymentMethodId();\n};\n\nexport const paymentRequestWithApplePay = async (\n  items: ApplePay.CartSummaryItem[],\n  options: any\n): Promise<void> => {\n  return NativeStripeSdk.paymentRequestWithApplePay(items, options);\n};\n\nexport const createPaymentMethod = async (\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<CreatePaymentMethodResult> => {\n  try {\n    const paymentMethod = await NativeStripeSdk.createPaymentMethod(\n      data,\n      options\n    );\n    return {\n      paymentMethod,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const retrievePaymentIntent = async (\n  clientSecret: string\n): Promise<RetrievePaymentIntentResult> => {\n  try {\n    const paymentIntent = await NativeStripeSdk.retrievePaymentIntent(\n      clientSecret\n    );\n    return {\n      paymentIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmPaymentMethod = async (\n  paymentIntentClientSecret: string,\n  data: PaymentMethodCreateParams.Params,\n  options: PaymentMethodCreateParams.Options = {}\n): Promise<ConfirmPaymentMethodResult> => {\n  try {\n    const paymentIntent = await NativeStripeSdk.confirmPaymentMethod(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n    return {\n      paymentIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const isApplePaySupported = async (): Promise<boolean> => {\n  return isiOS && (await NativeStripeSdk.isApplePaySupported());\n};\n\nexport const presentApplePay = async (\n  params: ApplePay.PresentParams\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    await NativeStripeSdk.presentApplePay(params);\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const updateApplePaySummaryItems = async (\n  summaryItems: ApplePay.CartSummaryItem[]\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n\n  try {\n    await NativeStripeSdk.updateApplePaySummaryItems(summaryItems);\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmApplePayPayment = async (\n  clientSecret: string\n): Promise<ApplePayResult> => {\n  if (!(await NativeStripeSdk.isApplePaySupported())) {\n    return {\n      error: {\n        code: ApplePayError.Canceled,\n        message: APPLE_PAY_NOT_SUPPORTED_MESSAGE,\n      },\n    };\n  }\n  try {\n    await NativeStripeSdk.confirmApplePayPayment(clientSecret);\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleCardAction = async (\n  paymentIntentClientSecret: string\n): Promise<HandleCardActionResult> => {\n  try {\n    const paymentIntent = await NativeStripeSdk.handleCardAction(\n      paymentIntentClientSecret\n    );\n    return {\n      paymentIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmSetupIntent = async (\n  paymentIntentClientSecret: string,\n  data: ConfirmSetupIntent.Params,\n  options: ConfirmSetupIntent.Options = {}\n): Promise<ConfirmSetupIntentResult> => {\n  try {\n    const setupIntent = await NativeStripeSdk.confirmSetupIntent(\n      paymentIntentClientSecret,\n      data,\n      options\n    );\n\n    return {\n      setupIntent,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const createTokenForCVCUpdate = async (\n  cvc: string\n): Promise<CreateTokenForCVCUpdateResult> => {\n  try {\n    const tokenId = await NativeStripeSdk.createTokenForCVCUpdate(cvc);\n\n    return {\n      tokenId,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const handleURLCallback = async (url: string): Promise<boolean> => {\n  const stripeHandled = await NativeStripeSdk.handleURLCallback(url);\n  return stripeHandled;\n};\n\nexport const initPaymentSheet = async (\n  params: PaymentSheet.SetupParams\n): Promise<InitPaymentSheetResult> => {\n  try {\n    const paymentOption = await NativeStripeSdk.initPaymentSheet(params);\n\n    return {\n      paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const presentPaymentSheet = async (\n  params: PaymentSheet.PresentParams\n): Promise<PresentPaymentSheetResult> => {\n  try {\n    const response = await NativeStripeSdk.presentPaymentSheet(params);\n\n    return {\n      paymentOption: response.paymentOption,\n    };\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n\nexport const confirmPaymentSheetPayment = async (): Promise<ConfirmPaymentSheetPaymentResult> => {\n  try {\n    await NativeStripeSdk.confirmPaymentSheetPayment();\n\n    return {};\n  } catch (error) {\n    return {\n      error: createError(error),\n    };\n  }\n};\n"]}